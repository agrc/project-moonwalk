name: Release Events

on:
  release:
    types: [published]

concurrency:
  group: '${{ github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  deploy-python-prod:
    name: Deploy python production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: prod
    permissions:
      id-token: write
      contents: read

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4
        with:
          show-progress: false

      - name: üóùÔ∏è Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}
          token_format: 'access_token'

      - name: üê≥ Set up Docker Buildx
        id: builder
        uses: docker/setup-buildx-action@v3

      - name: üóùÔ∏è Authenticate Docker to Google Cloud
        uses: docker/login-action@v3
        with:
          registry: us-central1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: üè∑Ô∏è Extract tags from GitHub
        id: meta
        uses: docker/metadata-action@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          images: us-central1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/images/job
          tags: |
            type=ref,suffix=-{{sha}},event=branch
            type=ref,prefix=pr-,suffix=-{{sha}},event=pr
            type=semver,pattern={{version}}
            latest

      - name: üì¶ Build and push image
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.builder.outputs.name }}
          tags: ${{ steps.meta.outputs.tags }}
          context: .
          file: ./Dockerfile
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: ‚òÅÔ∏è Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: üöÄ Deploy to Cloud Run Job
        run: |
          if [ ! "$(gcloud run jobs list | grep default)" ]; then
            gcloud run jobs create default \
              --region us-central1 \
              --image us-central1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/images/job:latest \
              --service-account cloud-run-sa@${{ secrets.PROJECT_ID }}.iam.gserviceaccount.com \
              --memory=3Gi \
              --cpu=1 \
              --max-retries 0 \
              --parallelism 0 \
              --set-secrets=/secrets/app/secrets.json=skid-secrets:latest \
              --task-timeout 3h
          else
            gcloud run jobs update default \
              --region us-central1 \
              --image us-central1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/images/job:latest \
              --service-account cloud-run-sa@${{ secrets.PROJECT_ID }}.iam.gserviceaccount.com \
              --memory=3Gi \
              --cpu=1 \
              --max-retries 0 \
              --parallelism 0 \
              --set-secrets=/secrets/app/secrets.json=skid-secrets:latest \
              --task-timeout 3h
          fi

      - name: üï∞Ô∏è Create Cloud Scheduler
        run: |
          if [ ! "$(gcloud scheduler jobs list --location=us-central1 | grep saturday-evening)" ]; then
          gcloud scheduler jobs create http saturday-evening \
            --description="Trigger the nfhl-skid bot once a week on saturday evening" \
            --schedule="0 3 * * 6" \
            --time-zone=America/Denver \
            --location=us-central1 \
            --uri="https://us-central1-run.googleapis.com/apis/run.googleapis.com/v1/namespaces/${{ secrets.PROJECT_ID }}/jobs/default:run" \
            --oauth-service-account-email=scheduler-sa@${{ secrets.PROJECT_ID }}.iam.gserviceaccount.com
          else
            gcloud scheduler jobs update http saturday-evening \
              --description="Trigger the nfhl-skid bot once a week on saturday evening" \
              --schedule="0 3 * * 6" \
              --time-zone=America/Denver \
              --location=us-central1 \
              --uri="https://us-central1-run.googleapis.com/apis/run.googleapis.com/v1/namespaces/${{ secrets.PROJECT_ID }}/jobs/default:run" \
              --oauth-service-account-email=scheduler-sa@${{ secrets.PROJECT_ID }}.iam.gserviceaccount.com
          fi

  deploy-ui-prod:
    name: Deploy UI to production
    runs-on: ubuntu-latest
    environment:
      name: prod
      url: https://ut-dts-agrc-moonwalk-prod.web.app/
    if: github.event.release.prerelease == false

    steps:
      - name: üöÄ Deploy
        uses: agrc/firebase-website-deploy-composite-action@v1
        with:
          identity-provider: ${{ secrets.IDENTITY_PROVIDER }}
          service-account-email: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}
          project-id: ${{ secrets.PROJECT_ID }}
          build-command: npm run build -- --mode production
          service-now-instance: ${{ secrets.SN_INSTANCE }}
          service-now-table: ${{ secrets.SN_TABLE }}
          service-now-system-id: ${{ secrets.SN_SYS_ID }}
          service-now-username: ${{ secrets.SN_USERNAME }}
          service-now-password: ${{ secrets.SN_PASSWORD }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
        env:
          VITE_FIREBASE_CONFIG: ${{ secrets.FIREBASE_CONFIG }}
